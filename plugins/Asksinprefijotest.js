import axios from 'axios';
import fetch from 'node-fetch';

const handler = async (msg, { conn, text }) => {
  const chatId = msg.key.remoteJid;

  // Validar que el mensaje comience con "ai " (sin importar may√∫scula)
  const match = text?.match(/^ai\s+(.+)/i);
  if (!match) return;
  const question = match[1];

  try {
    await conn.sendMessage(chatId, { react: { text: 'ü´Ü', key: msg.key } });

    const name = msg.pushName || 'Usuario';
    const prompt = await getPrompt();
    let result = '';

    try {
      result = await luminaiQuery(question, name, prompt);
      result = cleanResponse(result);
    } catch (e) {
      console.error('Error Luminai:', e);
      try {
        result = await perplexityQuery(question, prompt);
      } catch (e) {
        console.error('Error Perplexity:', e);
        throw new Error('No se obtuvo respuesta de los servicios');
      }
    }

    await conn.sendMessage(chatId, {
      text: result
    }, { quoted: msg });

    await conn.sendMessage(chatId, { react: { text: 'ü™¥', key: msg.key } });

  } catch (error) {
    console.error(error);
    await conn.sendMessage(chatId, {
      text: `‚ùå Error: ${error.message}`
    }, { quoted: msg });

    await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } });
  }
};

async function getPrompt() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
    return await res.text();
  } catch {
    return 'Eres un asistente inteligente';
  }
}

function cleanResponse(text) {
  if (!text) return '';
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
    .trim();
}

async function luminaiQuery(q, user, prompt) {
  const { data } = await axios.post('https://luminai.my.id', {
    content: q,
    user: user,
    prompt: prompt,
    webSearchMode: true
  });
  return data.result;
}

async function perplexityQuery(q, prompt) {
  const { data } = await axios.get('https://api.perplexity.ai/chat', {
    params: {
      query: q,
      context: prompt
    }
  });
  return data.response;
}

// Configuraci√≥n del handler
handler.command = /^ai\s+/i;
handler.help = ['ai <pregunta>'];
handler.tags = ['ai'];
handler.register = true;

export default handler;
