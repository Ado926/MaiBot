import axios from 'axios';
import fetch from 'node-fetch';

const handler = async (m, { conn, args, usedPrefix, command }) => {
  const text = args.join(' ');
  const chatId = m.chat;

  if (!text) {
    return conn.sendMessage(chatId, {
      text: `🌸 *Pregunta a Mai con IA Luminai*\n\n✳️ Ingresa tu pregunta\n\nEjemplo:\n*${usedPrefix + command}* ¿Quién inventó WhatsApp?`
    }, { quoted: m });
  }

  try {
    await conn.sendMessage(chatId, { react: { text: '⏳', key: m.key } });

    const name = m.pushName || 'Usuario';
    const prompt = await getPrompt();
    let result = '';

    try {
      result = await queryLuminai(text, name, prompt);
      result = cleanResponse(result);
    } catch (e) {
      console.error('Error en Luminai:', e);
      try {
        result = await queryPerplexity(text, prompt);
      } catch (e) {
        console.error('Error en Perplexity:', e);
        throw new Error('No se obtuvo respuesta de los servicios IA');
      }
    }

    const response = `╭───〔 *🌺 RESPUESTA DE MAI* 〕───⬣
│ ✦ *Pregunta:* ${text}
│ ✦ *Usuario:* ${name}
╰━━━━━━━━━━━━━━━━━━⬣

${result}

╭───〔 *Fuente* 〕───⬣
│ ✦ *Luminai AI*
╰━━━━━━━━━━━━━━⬣`;

    await conn.sendMessage(chatId, { text: response }, { quoted: m });
    await conn.sendMessage(chatId, { react: { text: '✅', key: m.key } });

  } catch (error) {
    console.error(error);
    await conn.sendMessage(chatId, {
      text: `❌ *Ocurrió un error:*\n${error.message}`
    }, { quoted: m });
    await conn.sendMessage(chatId, { react: { text: '❌', key: m.key } });
  }
};

async function getPrompt() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
    return await res.text();
  } catch (e) {
    console.error('Error al obtener el prompt:', e);
    return 'Eres un asistente inteligente';
  }
}

function cleanResponse(text) {
  if (!text) return '';
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
    .trim();
}

async function queryLuminai(q, user, prompt) {
  const { data } = await axios.post('https://luminai.my.id', {
    content: q,
    user: user,
    prompt: prompt,
    webSearchMode: true
  });
  return data.result;
}

async function queryPerplexity(q, prompt) {
  const { data } = await axios.get('https://api.perplexity.ai/chat', {
    params: {
      query: encodeURIComponent(q),
      context: encodeURIComponent(prompt)
    }
  });
  return data.response;
}

handler.command = ['ai', 'ask', 'ia'];
handler.help = ['ai <texto>'];
handler.tags = ['ai'];
handler.register = true;
export default handler;
